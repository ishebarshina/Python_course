# -*- coding: utf-8 -*-
"""
Created on Tue Sep 14 15:06:56 2021

@author: carmine
"""

# %%

# 2. Представлен список чисел.
# Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
from random import randrange
ini_list = [randrange(1, 300) for i in range(7)]
fin_list = [ini_list[i] for i in range(1, len(ini_list))
            if (ini_list[i] > ini_list[i-1])]
print(f"initial list: {ini_list}")
print(f"final list: {fin_list}")

# %%

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

list_2021 = [i for i in range(20, 241) if (i % 20 == 0 or i % 21 == 0)]
print(list_2021)

# %%

# 4. Представлен список чисел.
# Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

ini_list_1 = [randrange(1, 15) for i in range(12)]
unique_list = [elem for elem in ini_list_1 if ini_list_1.count(elem) < 2]
print(f"initial list: {ini_list_1}")
print(f"final list: {unique_list}")

# %%

# 5. Реализовать формирование списка, используя функцию range()
# и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
from functools import reduce

list_1000 = [i for i in range(100, 1001, 2)]
result = reduce(lambda a, b: a*b, list_1000)
print(f"initial list: {list_1000[:5]}...{list_1000[-5:]}")
print(f"Произведение всех элементов: {result}")
